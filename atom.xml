<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Snail Book</title>
  
  <subtitle>Snail 的知识库</subtitle>
  <link href="https://champion-yang.github.io/atom.xml" rel="self"/>
  
  <link href="https://champion-yang.github.io/"/>
  <updated>2024-06-27T10:06:37.042Z</updated>
  <id>https://champion-yang.github.io/</id>
  
  <author>
    <name>Sanil</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux</title>
    <link href="https://champion-yang.github.io/2024/06/27/linux/"/>
    <id>https://champion-yang.github.io/2024/06/27/linux/</id>
    <published>2024-06-27T10:05:40.000Z</published>
    <updated>2024-06-27T10:06:37.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><p>如果做一个好的 linux er</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;linux&quot;&gt;&lt;a href=&quot;#linux&quot; class=&quot;headerlink&quot; title=&quot;linux&quot;&gt;&lt;/a&gt;linux&lt;/h1&gt;&lt;p&gt;如果做一个好的 linux er&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test1</title>
    <link href="https://champion-yang.github.io/2024/06/27/test1/"/>
    <id>https://champion-yang.github.io/2024/06/27/test1/</id>
    <published>2024-06-27T09:57:34.000Z</published>
    <updated>2024-06-27T09:57:42.518Z</updated>
    
    <content type="html"><![CDATA[<p>what up</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;what up&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://champion-yang.github.io/2024/06/27/%E5%86%85%E5%AE%B9%E5%A4%A7%E7%BA%B2/"/>
    <id>https://champion-yang.github.io/2024/06/27/%E5%86%85%E5%AE%B9%E5%A4%A7%E7%BA%B2/</id>
    <published>2024-06-27T09:20:06.073Z</published>
    <updated>2024-06-27T09:28:34.067Z</updated>
    
    <content type="html"><![CDATA[<p>标题：Django DRF 源码分享与实践应用</p><p>一、引言</p><ul><li>简介：Django DRF 的定义和作用</li><li>为何选择 Django DRF：行业中的应用案例</li></ul><p>二、Django DRF 基础</p><ul><li>Django DRF 的架构概述</li><li>核心组件介绍<ul><li>序列化器（Serializers）</li><li>视图（Views）</li><li>路由（Routers）</li><li>认证系统（Authentication）</li></ul></li><li>请求和响应流程解析</li></ul><p>三、深入源码分析</p><ul><li>源码结构概览</li><li>关键代码解读<ul><li>视图处理机制</li><li>序列化器工作机制</li><li>认证和权限控制实现</li></ul></li><li>性能优化策略<ul><li>数据库查询优化</li><li>缓存机制</li></ul></li></ul><p>四、实践应用案例</p><ul><li>项目准备和环境设置</li><li>创建一个简单的API示例<ul><li>定义模型</li><li>编写序列化器</li><li>实现视图和路由</li></ul></li><li>认证和权限配置实践</li><li>测试和部署</li></ul><p>五、常见问题与解决方案</p><ul><li>跨域请求处理</li><li>API版本管理</li><li>安全性问题及应对措施</li></ul><p>六、扩展与定制</p><ul><li>Django DRF 扩展点介绍</li><li>如何根据项目需求定制功能</li><li>第三方包和中间件的整合使用</li></ul><p>七、总结与展望</p><ul><li>Django DRF 的最佳实践分享</li><li>Django DRF 的未来发展方向</li><li>社区和资源推荐</li></ul><p>八、Q&amp;A环节</p><ul><li>解答参与者的问题</li><li>收集反馈，共同探讨Django DRF的应用经验</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;标题：Django DRF 源码分享与实践应用&lt;/p&gt;
&lt;p&gt;一、引言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简介：Django DRF 的定义和作用&lt;/li&gt;
&lt;li&gt;为何选择 Django DRF：行业中的应用案例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二、Django DRF 基础&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://champion-yang.github.io/2024/06/27/DRF%E6%BA%90%E7%A0%81/"/>
    <id>https://champion-yang.github.io/2024/06/27/DRF%E6%BA%90%E7%A0%81/</id>
    <published>2024-06-27T09:19:49.051Z</published>
    <updated>2024-06-27T09:27:03.691Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Django-CBV的源码解析"><a href="#Django-CBV的源码解析" class="headerlink" title="Django CBV的源码解析"></a>Django CBV的源码解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">class VulnView(View):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def get(self, request):</span></span><br><span class="line"><span class="string">        return HttpResponse(&quot;get&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def post(self, request):</span></span><br><span class="line"><span class="string">        return HttpResponse(&quot;post&quot;)</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string"># Django 中 View 源码分析</span></span><br><span class="line"><span class="string">class View:</span></span><br><span class="line"><span class="string">    @classonlymethod</span></span><br><span class="line"><span class="string">    def as_view(cls):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        def view(request):</span></span><br><span class="line"><span class="string">            self = cls()</span></span><br><span class="line"><span class="string">            return self.dispatch(request, *args, **kwargs)</span></span><br><span class="line"><span class="string">        return view</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">    def dispatch(self, request):</span></span><br><span class="line"><span class="string">        handler = getattr(self, request.method.lower()) # 按请求方式分发    </span></span><br><span class="line"><span class="string">        return handler(request, *args, **kwargs)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 路由,</span></span><br><span class="line"><span class="string">path(&#x27;vuln/&#x27;, views.VulnView.as_view())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 一旦用户发起请求，比如get请求访问/vuln/，得到的是get方法的响应结果</span></span><br><span class="line"><span class="string">get请求访问/vuln/  =&gt;  view()  =&gt;   dispatch()  =&gt;  get()  </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">class VulnView(APIView):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def get(self, request):</span></span><br><span class="line"><span class="string">        return HttpResponse(&quot;APIView:get&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def post(self, request):</span></span><br><span class="line"><span class="string">        return HttpResponse(&quot;APIView:post&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># DRF 中 APIView 源码分析</span></span><br><span class="line"><span class="string">class APIView(View):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @classmethod</span></span><br><span class="line"><span class="string">    def as_view(cls):</span></span><br><span class="line"><span class="string">        view = super().as_view()</span></span><br><span class="line"><span class="string">        view.cls = cls</span></span><br><span class="line"><span class="string">        return view</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    def dispatch(self, request):</span></span><br><span class="line"><span class="string">        # （1）构建新的request对象</span></span><br><span class="line"><span class="string">        request = self.initialize_request(request, *args, **kwargs)</span></span><br><span class="line"><span class="string">        self.request = request</span></span><br><span class="line"><span class="string">        # （2）认证、权限、限流组件三件套</span></span><br><span class="line"><span class="string">        self.initial(request, *args, **kwargs)</span></span><br><span class="line"><span class="string">        # （3）分发</span></span><br><span class="line"><span class="string">        handler = getattr(self, request.method.lower()) # 按请求方式分发       </span></span><br><span class="line"><span class="string">        return handler(request, *args, **kwargs)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;基于 Django View 视图，提供【增、删、改、查、详情】五个api&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VulnView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, pk</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取一条数据&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            instance = Vuln.objects.get(pk=pk)</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(data=&#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: instance.pk,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: instance.name,</span><br><span class="line">                <span class="string">&quot;classmate&quot;</span>: instance.classmate,</span><br><span class="line">                <span class="string">&quot;description&quot;</span>: instance.description,</span><br><span class="line">            &#125;, status=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Student.DoesNotExist:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(data=<span class="literal">None</span>, status=<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加一个漏洞信息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 1. 接收客户单提交的数据，验证客户端的数据</span></span><br><span class="line">        data = json.loads(request.body)</span><br><span class="line">        name = data.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">        level = data.get(<span class="string">&quot;level&quot;</span>)</span><br><span class="line">        solution = data.get(<span class="string">&quot;solution&quot;</span>)</span><br><span class="line">        classmate = data.get(<span class="string">&quot;classmate&quot;</span>)</span><br><span class="line">        description = data.get(<span class="string">&quot;description&quot;</span>)</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        验证逻辑伪代码</span></span><br><span class="line"><span class="string">        if type(level, int):</span></span><br><span class="line"><span class="string">            if level &gt; 10:</span></span><br><span class="line"><span class="string">                return JsonResponse(&#123;&quot;errmsg&quot;: &quot;level 值异常&quot;&#125;)</span></span><br><span class="line"><span class="string">        if not description:</span></span><br><span class="line"><span class="string">            return JsonResponse(&#123;&quot;errmsg&quot;: &quot;description 值异常&quot;&#125;)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 操作数据库，保存数据</span></span><br><span class="line">        instance = Vuln.objects.create(</span><br><span class="line">            name=name,</span><br><span class="line">            level=level,</span><br><span class="line">            solution=solution,</span><br><span class="line">            classmate=classmate,</span><br><span class="line">            description=description,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(data=&#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: instance.pk,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: instance.name,</span><br><span class="line">            <span class="string">&quot;level&quot;</span>: instance.level,</span><br><span class="line">            <span class="string">&quot;solution&quot;</span>: instance.solution,</span><br><span class="line">            <span class="string">&quot;classmate&quot;</span>: instance.classmate,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: instance.description,</span><br><span class="line">        &#125;, status=<span class="number">201</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;基于 DRF ModelViewSet 视图, 提供【增、删、改、查、详情】五个api&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VulnModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField()</span><br><span class="line">    level = serializers.IntegerField(max_value=<span class="number">10</span>)</span><br><span class="line">    description = serializers.CharField(allow_null=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Vuln</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentModelViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Vuln.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = VulnModelSerializer</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">核心源码    </span><br><span class="line">def check_throttles(self, request):</span><br><span class="line">    throttle_durations = []</span><br><span class="line">    for throttle in self.get_throttles():</span><br><span class="line">        if not throttle.allow_request(request, self):</span><br><span class="line"># 调用视图层配置频率类的allow_request方法,该方法将用户的信息存入缓存中,每次请求前判断是否超过访问频率</span><br><span class="line">            throttle_durations.append(throttle.wait())</span><br><span class="line"></span><br><span class="line">    if throttle_durations:</span><br><span class="line">        duration = max(durations, default=None)</span><br><span class="line">        self.throttled(request, duration)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将模型实例转换为序列化后的数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_representation</span>(<span class="params">self, instance</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 伪代码 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: instance.<span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: instance.name,</span><br><span class="line">        <span class="string">&#x27;phone&#x27;</span>: instance.phone,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将客户端提交的数据转换为内部数据，并进行验证校验</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_internal_value</span>(<span class="params">self, data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 伪代码 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> field <span class="keyword">in</span> fields:</span><br><span class="line">        validate_method = <span class="built_in">getattr</span>(self, <span class="string">&#x27;validate_&#x27;</span> + field.field_name, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: data.get(<span class="string">&#x27;id&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: data.get(<span class="string">&#x27;name&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;phone&#x27;</span>: data.get(<span class="string">&#x27;phone&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 伪代码 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> User(**validated_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 伪代码 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> validated_data.items():</span><br><span class="line">        <span class="built_in">setattr</span>(instance, key, value)</span><br><span class="line">    instance.save()</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>版本号：<br>部侧漏管平台：V1.0R03F01SP01<br>部侧测试系统：V1.0R02F01SP01</p><p>assessment_test_tool.C.GXB.BSAV2.0R01F06.V1.0R02F01SP01.24062010.dat</p><p>assessment_test_tool.C.GXB.BSAV2.0R01F06.V1.0R01F01SP01.24062010.dat</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Django-CBV的源码解析&quot;&gt;&lt;a href=&quot;#Django-CBV的源码解析&quot; class=&quot;headerlink&quot; title=&quot;Django CBV的源码解析&quot;&gt;&lt;/a&gt;Django CBV的源码解析&lt;/h3&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DRF源码解析与实践应用</title>
    <link href="https://champion-yang.github.io/2024/06/27/DRF%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5%E5%BA%94%E7%94%A8/"/>
    <id>https://champion-yang.github.io/2024/06/27/DRF%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5%E5%BA%94%E7%94%A8/</id>
    <published>2024-06-27T09:18:01.000Z</published>
    <updated>2024-06-27T09:18:01.148Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://champion-yang.github.io/2024/06/27/hello-world/"/>
    <id>https://champion-yang.github.io/2024/06/27/hello-world/</id>
    <published>2024-06-27T08:46:47.594Z</published>
    <updated>2024-06-27T08:46:47.594Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
