{"meta":{"title":"Snail Book","subtitle":"Snail 的知识库","description":"个人文档","author":"Sanil","url":"https://champion-yang.github.io","root":"/"},"pages":[{"title":"page1","date":"2024-06-27T09:30:02.000Z","updated":"2024-06-27T09:30:22.628Z","comments":true,"path":"page1/index.html","permalink":"https://champion-yang.github.io/page1/index.html","excerpt":"","text":"xxx 这是 page1"},{"title":"page2","date":"2024-06-27T09:58:06.000Z","updated":"2024-06-27T09:58:20.926Z","comments":true,"path":"page2/index.html","permalink":"https://champion-yang.github.io/page2/index.html","excerpt":"","text":"这是在干嘛"}],"posts":[{"title":"linux","slug":"linux","date":"2024-06-27T10:05:40.000Z","updated":"2024-06-27T10:06:37.042Z","comments":true,"path":"2024/06/27/linux/","permalink":"https://champion-yang.github.io/2024/06/27/linux/","excerpt":"","text":"linux如果做一个好的 linux er","categories":[],"tags":[],"author":"Sanil"},{"title":"test1","slug":"test1","date":"2024-06-27T09:57:34.000Z","updated":"2024-06-27T09:57:42.518Z","comments":true,"path":"2024/06/27/test1/","permalink":"https://champion-yang.github.io/2024/06/27/test1/","excerpt":"","text":"what up","categories":[],"tags":[],"author":"Sanil"},{"title":"","slug":"内容大纲","date":"2024-06-27T09:20:06.073Z","updated":"2024-06-27T09:28:34.067Z","comments":true,"path":"2024/06/27/内容大纲/","permalink":"https://champion-yang.github.io/2024/06/27/%E5%86%85%E5%AE%B9%E5%A4%A7%E7%BA%B2/","excerpt":"","text":"标题：Django DRF 源码分享与实践应用 一、引言 简介：Django DRF 的定义和作用 为何选择 Django DRF：行业中的应用案例 二、Django DRF 基础 Django DRF 的架构概述 核心组件介绍 序列化器（Serializers） 视图（Views） 路由（Routers） 认证系统（Authentication） 请求和响应流程解析 三、深入源码分析 源码结构概览 关键代码解读 视图处理机制 序列化器工作机制 认证和权限控制实现 性能优化策略 数据库查询优化 缓存机制 四、实践应用案例 项目准备和环境设置 创建一个简单的API示例 定义模型 编写序列化器 实现视图和路由 认证和权限配置实践 测试和部署 五、常见问题与解决方案 跨域请求处理 API版本管理 安全性问题及应对措施 六、扩展与定制 Django DRF 扩展点介绍 如何根据项目需求定制功能 第三方包和中间件的整合使用 七、总结与展望 Django DRF 的最佳实践分享 Django DRF 的未来发展方向 社区和资源推荐 八、Q&amp;A环节 解答参与者的问题 收集反馈，共同探讨Django DRF的应用经验","categories":[],"tags":[]},{"title":"","slug":"DRF源码","date":"2024-06-27T09:19:49.051Z","updated":"2024-06-27T09:27:03.691Z","comments":true,"path":"2024/06/27/DRF源码/","permalink":"https://champion-yang.github.io/2024/06/27/DRF%E6%BA%90%E7%A0%81/","excerpt":"","text":"Django CBV的源码解析1234567891011121314151617181920212223242526272829&#x27;&#x27;&#x27;&#x27;class VulnView(View): def get(self, request): return HttpResponse(&quot;get&quot;) def post(self, request): return HttpResponse(&quot;post&quot;) # Django 中 View 源码分析class View: @classonlymethod def as_view(cls): def view(request): self = cls() return self.dispatch(request, *args, **kwargs) return view def dispatch(self, request): handler = getattr(self, request.method.lower()) # 按请求方式分发 return handler(request, *args, **kwargs)# 路由,path(&#x27;vuln/&#x27;, views.VulnView.as_view())# 一旦用户发起请求，比如get请求访问/vuln/，得到的是get方法的响应结果get请求访问/vuln/ =&gt; view() =&gt; dispatch() =&gt; get() &#x27;&#x27;&#x27;&#x27; 12345678910111213141516171819202122232425262728&#x27;&#x27;&#x27;class VulnView(APIView): def get(self, request): return HttpResponse(&quot;APIView:get&quot;) def post(self, request): return HttpResponse(&quot;APIView:post&quot;)# DRF 中 APIView 源码分析class APIView(View): @classmethod def as_view(cls): view = super().as_view() view.cls = cls return view def dispatch(self, request): # （1）构建新的request对象 request = self.initialize_request(request, *args, **kwargs) self.request = request # （2）认证、权限、限流组件三件套 self.initial(request, *args, **kwargs) # （3）分发 handler = getattr(self, request.method.lower()) # 按请求方式分发 return handler(request, *args, **kwargs)&#x27;&#x27;&#x27; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&quot;&quot;&quot;基于 Django View 视图，提供【增、删、改、查、详情】五个api&quot;&quot;&quot;class VulnView(View): def get(self, request, pk): &quot;&quot;&quot;获取一条数据&quot;&quot;&quot; try: instance = Vuln.objects.get(pk=pk) return JsonResponse(data=&#123; &quot;id&quot;: instance.pk, &quot;name&quot;: instance.name, &quot;classmate&quot;: instance.classmate, &quot;description&quot;: instance.description, &#125;, status=200) except Student.DoesNotExist: return JsonResponse(data=None, status=404) def post(self, request): &quot;&quot;&quot;添加一个漏洞信息&quot;&quot;&quot; # 1. 接收客户单提交的数据，验证客户端的数据 data = json.loads(request.body) name = data.get(&quot;name&quot;) level = data.get(&quot;level&quot;) solution = data.get(&quot;solution&quot;) classmate = data.get(&quot;classmate&quot;) description = data.get(&quot;description&quot;) &#x27;&#x27;&#x27; 验证逻辑伪代码 if type(level, int): if level &gt; 10: return JsonResponse(&#123;&quot;errmsg&quot;: &quot;level 值异常&quot;&#125;) if not description: return JsonResponse(&#123;&quot;errmsg&quot;: &quot;description 值异常&quot;&#125;) &#x27;&#x27;&#x27; # 2. 操作数据库，保存数据 instance = Vuln.objects.create( name=name, level=level, solution=solution, classmate=classmate, description=description, ) # 3. 返回结果 return JsonResponse(data=&#123; &quot;id&quot;: instance.pk, &quot;name&quot;: instance.name, &quot;level&quot;: instance.level, &quot;solution&quot;: instance.solution, &quot;classmate&quot;: instance.classmate, &quot;description&quot;: instance.description, &#125;, status=201) 1234567891011121314&quot;&quot;&quot;基于 DRF ModelViewSet 视图, 提供【增、删、改、查、详情】五个api&quot;&quot;&quot;class VulnModelSerializer(serializers.ModelSerializer): id = serializers.IntegerField() level = serializers.IntegerField(max_value=10) description = serializers.CharField(allow_null=False) class Meta: model = Vuln fields = &quot;__all__&quot;class StudentModelViewSet(ModelViewSet): queryset = Vuln.objects.all() serializer_class = VulnModelSerializer 12345678910111213核心源码 def check_throttles(self, request): throttle_durations = [] for throttle in self.get_throttles(): if not throttle.allow_request(request, self):# 调用视图层配置频率类的allow_request方法,该方法将用户的信息存入缓存中,每次请求前判断是否超过访问频率 throttle_durations.append(throttle.wait()) if throttle_durations: duration = max(durations, default=None) self.throttled(request, duration) 12345678910111213141516171819202122232425262728293031# 将模型实例转换为序列化后的数据def to_representation(self, instance): &quot;&quot;&quot; 伪代码 &quot;&quot;&quot; return &#123; &#x27;id&#x27;: instance.id, &#x27;name&#x27;: instance.name, &#x27;phone&#x27;: instance.phone, &#125;# 将客户端提交的数据转换为内部数据，并进行验证校验def to_internal_value(self, data): &quot;&quot;&quot; 伪代码 &quot;&quot;&quot; for field in fields: validate_method = getattr(self, &#x27;validate_&#x27; + field.field_name, None) return &#123; &#x27;id&#x27;: data.get(&#x27;id&#x27;), &#x27;name&#x27;: data.get(&#x27;name&#x27;), &#x27;phone&#x27;: data.get(&#x27;phone&#x27;), &#125;def create(self, validated_data): &quot;&quot;&quot; 伪代码 &quot;&quot;&quot; return User(**validated_data)def update(self, instance, validated_data): &quot;&quot;&quot; 伪代码 &quot;&quot;&quot; for key, value in validated_data.items(): setattr(instance, key, value) instance.save() return instance 版本号：部侧漏管平台：V1.0R03F01SP01部侧测试系统：V1.0R02F01SP01 assessment_test_tool.C.GXB.BSAV2.0R01F06.V1.0R02F01SP01.24062010.dat assessment_test_tool.C.GXB.BSAV2.0R01F06.V1.0R01F01SP01.24062010.dat","categories":[],"tags":[]},{"title":"DRF源码解析与实践应用","slug":"DRF源码解析与实践应用","date":"2024-06-27T09:18:01.000Z","updated":"2024-06-27T09:18:01.148Z","comments":true,"path":"2024/06/27/DRF源码解析与实践应用/","permalink":"https://champion-yang.github.io/2024/06/27/DRF%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5%E5%BA%94%E7%94%A8/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2024-06-27T08:46:47.594Z","updated":"2024-06-27T08:46:47.594Z","comments":true,"path":"2024/06/27/hello-world/","permalink":"https://champion-yang.github.io/2024/06/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}